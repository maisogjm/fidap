#! /bin/csh -f
# corr_idlrsp_script
# 07.14.94 by Susan Courtney, Ph.D. and Jose' Ma. Maisog, M.D.
# Section on Functional Brain Imaging,
# Laboratory of Psychology and Psychopathology,
# National Institute of Mental Health

#
# Shell script to perform a correlation with an idealized response 
# analysis on 16-bit ANALYZE images.

# C executables called: F, fmri_covidl_3, fp2byte, fp2word2, makeheader4, get_dims_from

# SAVE CURRENT WORKING DIRECTORY FOR LATER USE
set startdir = $cwd

# QUERY USER FOR IMAGE DIRECTORY
scroll 10
echo Note: This script calls C executables written by
echo Susan Courtney, Ph.D., NIH/NIMH/LPP/SFBI and
echo Jose\' Ma. Maisog, M.D., NIH/NIMH/LPP/SFBI
echo ""
echo This script will perform a correlation with an idealized response
echo analysis on a set of 16-bit ANALYZE images.  The images must all
echo be located in the same directory, and there must be at least one
echo ANALYZE header .hdr file which contains the appropriate image
echo dimension information.  You must have read/write access to the
echo directory in which the images are kept.  The correlations are
echo calculated between the data and the idealized response function for
echo the task sequence. To compute the idealized response, this program
echo requires a square wave which describes the pattern of the task
echo conditions in time.  This is convolved with a delay and 
echo dispersion function.
echo ""
echo The greater the delay and dispersion constant, lamda, the more
echo smoothed and delayed the ideal response will be. You may use the
echo value used in Friston et al for visual stimulation, 7.49,
echo OR you may CALCULATE LAMDA. BEFORE running this program, you must
echo also determine the CORRECTED DEGREES OF FREEDOM, using the
echo appropriate fidap script.
echo ""
echo -n "Do you want to continue?(type y) or return to the previous menu?(n)"
set choice = $<
if ($choice != "y") then
    echo QUITTING SHELL SCRIPT....
    sleep 2
    exit
endif

echo -n "Please enter directory in which input text file is kept: "
set dir = $<
while (! -d $dir)
    echo "Directory $dir does not exist."
    echo -n "Please enter directory in which input text file is kept: "
    set dir = $<
end
cd $dir
touch fidap.log
echo '******************************************************' >> fidap.log
echo `date` " : " $user " : " corr_idlrsp_script >> fidap.log


# QUERY USER FOR NAME OF INPUT TEXT FILE, IF IT ALREADY EXISTS
echo ""
echo This script will perform a correlation with an idealized response
echo across multiple runs of 16-bit images.  The runs must all have the
echo same number of images, and the same stimulation sequence.
echo ""
echo To run this script, you must first make a text file.
echo ""
echo This file should contain the names of the images in the first run,
echo then the names of the images in the second run, etc., one .img
echo filename per line.  Following each image name you must place a
echo number which will be used to weight the global mean intensities of
echo "the images when ratio-adjusting the images' global means (eg, '1')."
echo ""
echo -n Press Return to continue...
set dummy = $<
echo ""
echo If this text file doesn\'t yet exist, you can create it using a text editor
echo \(eg, vi, emacs, or ez\), or you can create it via this script.
echo ""
echo CHOICES:
echo "  (1) The text file is already made."
echo "      Continue with this script."
echo "  (2) Make the text file now, using either"
echo "      vi, emacs, or ez."
echo "  (3) Create the text file by directly typing"
echo "      in the filenames via this script."
echo "  (4) Exit this script, and make the text file"
echo "      (using, eg,  vi, emacs, or ez).  After it is"
echo "      created you must return to this script."
echo ""
echo -n " CHOOSE ACTION: "
set choice = $<
while ($choice != "1" && $choice != "2" && $choice != "3" && $choice != "4")
    echo -n " CHOOSE ACTION: "
    set choice = $<
end

switch ($choice)
    # TEXT FILE ALREADY MADE.
    case 1:
    echo ""
    echo -n "Type in name of text file: "
    set textfile = $<
    while (! -e $textfile)
	echo $textfile does not exist.
	echo ""
	echo -n "Type in name of text file: "
	set textfile = $<
    end
    echo ""
    breaksw

    # MAKE THE TEXT FILE VIA THIS SCRIPT
    case 2:
    echo ""
    echo -n "Type in desired name for text file: "
    set textfile = $<
    echo ""
    echo -n "Type in desired editor (eg, "vi" or "emacs"): "
    set editor = $<
    echo ""
    echo ""
    echo Now entering the editor $editor, creating file $textfile.
    echo This file should contain the names of the images in the first run,
    echo then the names of the images in the second run, etc., one .img
    echo filename per line.  Following each image name you must place a 
    echo number which will be used to weight the global mean intensities of
    echo "the images when ratio-adjusting the images' global means (eg, '1')."
    echo -n Type Return when ready...
    set dummy = $<
    echo ""
    eval `echo $editor $textfile`
    echo ""
    echo ""
    breaksw

    # MAKE THE TEXT FILE VIA THIS SCRIPT
    case 3:
    echo ""
    echo -n "Type in desired name for text file: "
    set textfile = $<
    echo ""
    echo I shall now create the file $textfile.  You must now type in the names
    echo of the images in each run, one .img filename pair per line.  Following each
    echo name you must place a number which will be used to weight the global
    echo mean intensities of "the images when ratio-adjusting the images' global
    echo means (eg, '1')." After the last carriage return, type a \<Control-D\>.
    echo ""
    cat > $textfile
    breaksw

    # EXIT SCRIPT, MAKE THE TEXT FILE, AND THEN RETURN TO THIS SCRIPT.
    case 4:
    echo You have chosen to exit this script.  You must now create the text file.
    echo This file should contain the names of the images in the first run,
    echo then the names of the images in the second run, etc., one .img
    echo filename per line.  Following each image name you must place a 
    echo number which will be used to weight the global mean intensities of
    echo "the images when ratio-adjusting the images' global means (eg, '1')."
    echo Then re-run this script.
    echo -n Type Return when ready...
    set dummy = $<
    exit
    breaksw

endsw

# QUERY USER FOR CORRECTED DEGREES OF FREEDOM AND PROBABILITY THRESHOLD.
# CALCULATE F THRESHOLD FROM THESE PARAMETERS.

echo "The numerator degrees of freedom for the F ratio is 1."
echo -n "What is your denominator degrees of freedom? "
set df = $<

echo -n "What is your single voxel probability threshold? "
set alpha = $<

set f = (`F $alpha 1 $df`)

# QUERY USER FOR NAME OF ANALYZE .hdr FILE
echo ""
echo Here are the ANALYZE header files in ${dir}:
\ls *.hdr
echo ""
echo "Please enter the name of one of these ANALYZE header"
echo "files which has the correct image dimensions for your"
echo -n "images (including .hdr extension): "
set hdrfile = $<
while (! -e $hdrfile)
    echo $hdrfile does not exist.
    echo ""
    echo -n "Type in name of header file file: "
    set hdrfile = $<
end
set dims = `get_dims_from $hdrfile`

# QUERY USER FOR DESIRED NAME OF floating point FILE FOR CORRELATIONAL MAP
echo ""
echo "The F map for the correlation ANCOVA will be written to a floating point"
echo "point .fp file.  Please enter the desired name of the .fp file,"
echo -n "including .fp extension: "
set cfile = $<

# QUERY USER WHETHER A SCALED 16-BIT IMAGE IS DESIRED
echo ""
echo If you wish, a scaled 16-bit image of the correlation ANCOVA  F map
echo can be generated.  This image will be scaled by a factor
echo of 1000.  Thus, a correlation of 0.672 will have a 16-bit
echo value of 672.  This can be useful if you are doing
echo pixel sampling within ANALYZE.  The drawback is that
echo 16-bit images are fairly large.
echo ""
echo -n "Do you want scaled 16-bit images <y/n>? "
set scaled_imgs = $<

echo ""
echo '******************************************************'
echo ""
echo Finally, you must type in a number between 0 and 19.
echo The \'nice\' command will use this number to adjust
echo the priority of this process.  \'0\' will result in
echo the default priority being used.  Higher numbers will
echo result in lower priorities.  We recommend \'0\' to be
echo used during off hours, and higher \(nicer\) numbers to
echo be used during regular work hours.
echo ""
echo -n "Priority adjustment number? "
set priority = $<
if ($priority == "") then
    set priority = 0
endif
echo $priority >> fidap.log

# CHECK WITH USER IF IT'S OKAY TO GO ON
echo ""
echo A mean image will be generated from the images in
echo all runs.  It will be thresholded to generate
echo a mask of the brain in the following manner.
echo ""
echo You will be asked to specify a number which shall be
echo used as the threshold.  The maximum voxel intensity of
echo the mean image, max_vox, will be determined, and
echo then all voxels with intensity greater than or equal
echo to max_vox \* threshold / 100 will be set to 1 in the
echo mask\; all others will be set to 0 in the mask.
echo Thus, threshold is expressed as a percentage.
echo For example, if you wish the threshold to be 33.33%
echo of max_vox, type in \"33.33\" instead of \"0.33\".
echo ""
echo -n "Continue <y/n>? "
set choice = $<
if ($choice != "y") then
    echo QUITTING SHELL SCRIPT....
    sleep 2
    exit
endif

# CALL fmri_group_t:
echo nice -$priority fmri_covidl_3 $hdrfile $textfile $cfile $f $df >> fidap.log
echo nice -$priority fmri_covidl_3 $hdrfile $textfile $cfile $f $df
nice -$priority fmri_covidl_3 $hdrfile $textfile $cfile $f $df
sleep 5

# LOOP OVER FLOATING POINT IMAGE OUTPUT
foreach file($cfile signedF.fp max%change.fp mindetsig.fp)

	# FIND MAX AND MIN OF FLOATING POINT IMAGE.
	set fpmax = `maxfp $file`
	set fpmin = `minfp $file`

	# CONVERT TO 8-BIT IMAGE
	echo fp2byte $file $file:r.img 
	fp2byte $file $file:r.img >> /dev/null
	makeheader4 $file:r.hdr $dims 1 8 255 0 $fpmax $fpmin 2

	# GENERATE SCALED 16-BIT IMAGES IF DESIRED
	if ($scaled_imgs == "y") then
		echo fp2word2 $file W$file:r.img 1000
		fp2word2 $file W$file:r.img 1000
		set wordmax = `max16bit2 W$file:r.img`
		set wordmin = `min16bit2 W$file:r.img`
		makeheader4 W$file:r.hdr $dims 1 16 $wordmax $wordmin $fpmax $fpmin 4
	endif
end

exit

 
