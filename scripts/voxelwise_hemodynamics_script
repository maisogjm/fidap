#!/bin/csh -f
# voxelwise_hemodynamics_script
# 04.19.96 by Jose' Ma. Maisog, M.D.
# Laboratory of Psychology and Psychopathology,
# National Institute of Mental Health

#
# Shell script to estimate lag and dispersion on a voxel-wise basis.

# C executables called: voxelwise_hemodynamics, makeheader4, maxfp, minfp,
# get_dims_from

# Also calls the C shell script scroll and fp2byte_script

# Query user for directory
scroll 10
echo  ""
echo '******************************************************'
echo  ""
echo -n "Enter the name of the directory for output files: "
set dir = $<
while (! -d $dir)
    echo Directory $dir does not exist.
    echo ""
    echo -n "Enter the name of the directory for output files: "
    set dir = $<
end
cd $dir
touch fidap.log
echo '******************************************************' >> fidap.log
echo `date` " : " $user " : " voxelwise_hemodynamics_script >> fidap.log
echo "The following lines are EXACTLY as you've typed them into the script:" >> fidap.log

# Query user for header file.
echo  ""
echo '******************************************************'
echo  ""
echo "Enter the name of a header file which will be used to determine"
echo "the XYZ dimensions of the image volume."
echo ""
echo -n "Name of header file (including .hdr extension)? "
set headerfile = $<
while(! -e $headerfile)
    echo File $headerfile does not exist.
    echo ""
    echo -n "Name of header file (including .hdr extension)? "
    set headerfile = $<
end
echo $headerfile >> fidap.log

echo  ""
echo '******************************************************'
echo  ""
echo -n "Name of 8-bit mask file (including .img extension)? "
set mask = $<
while(! -e $mask)
    echo File $mask does not exist.
    echo ""
    echo -n "Name of 8-bit mask file (including .img extension)? "
    set mask = $<
end
echo $mask >> fidap.log

# Query user for input text files.
echo  ""
echo '******************************************************'
echo ""
echo The input textfile of file names should contain the names of the
echo fMRI image volume files, one name per line.  If you have more
echo than one fMRI run, just list all the files for the first run,
echo then list all the files for the second run, etc., all in the
echo same text file, one name per line.
echo ""
echo -n "Input text file containing names of 16-bit image volumes? "
set name_textfile = $<
while(! -e $name_textfile)
    echo File $name_textfile does not exist.
    echo ""
    echo -n "Input text file containing names of 16-bit image volumes? "
    set name_textfile = $<
end
echo $name_textfile >> fidap.log
echo ""
echo ""
echo The text file containing slice acquisition sequence should have
echo only one line, which is a sequence of numbers indicating the order
echo in which slices were acquired, separated by spaces.  For example,
echo if an image volume had 12 slices, and all the odd slices were
echo acquired first, and then all the even slices were acquired, then
echo this one line should be
echo ""
echo "1 3 5 7 9 11 2 4 6 8 10 12"
echo ""
echo ""
echo -n "Input text file containing slice acquisition sequence? "
set slice_seq_textfile = $<
while(! -e $slice_seq_textfile)
    echo File $slice_seq_textfile does not exist.
    echo ""
    echo -n "Input text file containing slice acquisition sequence? "
    set slice_seq_textfile = $<
end
echo $slice_seq_textfile >> fidap.log

echo  ""
echo '******************************************************'
echo ""
echo -n "How many independent variables? "
set num_ind_var = $<
echo $num_ind_var >> fidap.log
echo ""
echo The input text files containing independent variables should
echo have one number per line.  There should be as many numbers in each
echo of these text files as there are scans per run.  There can be any
echo number of independent variables, but there should be at least one.
echo ""
set ind_var_list
set lag_disp_list
set index = 1
while($index <= $num_ind_var)
    echo ""
    echo -n "Text file for independent variable #${index}? "
    set textfile = $<
    while(! -e $textfile)
        echo File $textfile does not exist.
        echo ""
        echo -n "Text file for independent variable #${index}? "
        set textfile = $<
    end
    echo $textfile >> fidap.log
    set filename = $textfile:t
    echo The lag for $textfile will be written to lag_$filename:r.img.
    echo The dispersion for $textfile will be written to disp_$filename:r.img.
    echo ""
    set ind_var_list  = ( $ind_var_list $textfile lag_$filename:r.img \
						disp_$filename:r.img )
    set lag_disp_list = ( $lag_disp_list lag_$filename:r.img \
						disp_$filename:r.img )
    @ index ++
end

echo  ""
echo '******************************************************'
echo ""
echo A cycle is one period of an input waveform which is
echo repeated.  You can consider an entire run a cycle,
echo if each run had the same sequence of input stimuli.
echo Or, you can consider one on-off sequence as a cycle.
echo ""
echo -n "Number of CYCLES in this data? "
set num_runs = $<
echo $num_runs >> fidap.log

echo -n "Number of scans (timepoints) per CYCLE? "
set num_dat_pts = $<
echo $num_dat_pts >> fidap.log

echo -n "TR in seconds? "
set tr = $<
echo $tr >> fidap.log

echo -n "Maximum lag in seconds to be allowed? "
set max_lag = $<
echo $max_lag >> fidap.log

echo -n "Minimum lag in seconds to be allowed? "
set min_lag = $<
echo $min_lag >> fidap.log

echo ""
echo '******************************************************'
echo ""
echo Now, you must type in a number between 0 and 19.
echo The \'nice\' command will use this number to adjust
echo the priority of this process.  \'0\' will result in
echo the default priority being used.  Higher numbers will
echo result in lower priorities.  We recommend \'0\' to be
echo used during off hours, and higher \(nicer\) numbers to
echo be used during regular work hours.
echo ""
echo -n "Priority adjustment number? "
set priority = $<
if ($priority == "") then
    set priority = 0
endif
echo $priority >> fidap.log

echo ""
echo '******************************************************'
echo ""
echo Now you must indicate whether you want ABSOLUTE or RELATIVE times.
echo In our convention, ABSOLUTE time is as follows.  Suppose two voxels
echo are part of the same functional region and behave exactly the same,
echo but they are in different slices.  Under \"ABSOLUTE\" time, they will
echo have the same lag value in the lag map, but under "RELATIVE" time,
echo they will have different times, because of the time difference in slice
echo acquisition.  \(The voxel in the slice acquired at a later time will
echo have a larger lag.\)
echo ""
echo ""
echo -n "Do you want ABSOLUTE times <y/n>? "
set abs_time = $<
while (( $abs_time != "y") && ($abs_time != "n"))
    echo ""
    echo Type in a \'y\' or \'n\'.
    echo ""
    echo -n "Do you want ABSOLUTE times <y/n>? "
    set abs_time = $<
end

echo ""
echo '******************************************************'
echo ""
echo -n "Do you want scans to be ratio normalized <y/n>? "
set ratio_norm = $<
while (($ratio_norm != "y") && ($ratio_norm != "n"))
    echo -n "Do you want scans to be ratio normalized <y/n>? "
    set ratio_norm = $<
end

echo  ""
echo '******************************************************'
echo ""
echo "" >> fidap.log
echo SUMMARY: >> fidap.log
echo ANALYZE header file is $headerfile >> fidap.log
echo Mask is $mask >> fidap.log
echo Input textfile of names is $name_textfile >> fidap.log
echo Input textfile of slice acquisition sequence is $slice_seq_textfile >> fidap.log
echo Number of independent variables = $num_ind_var >> fidap.log
echo Text file for independent variable #$index is $textfile >> fidap.log
echo Number of runs = $num_runs >> fidap.log
echo Number of timepoints per run = $num_dat_pts >> fidap.log
echo TR in seconds = $tr >> fidap.log
echo Max lag to be allowed = $max_lag >> fidap.log
echo Min lag to be allowed = $min_lag >> fidap.log
echo nice -$priority voxelwise_hemodynamics $headerfile $name_textfile \
	$num_runs $num_dat_pts $mask $max_lag $min_lag $num_ind_var $slice_seq_textfile \
	$tr $ind_var_list
echo nice -$priority voxelwise_hemodynamics $headerfile $name_textfile \
	$num_runs $num_dat_pts $mask $max_lag $min_lag $num_ind_var $slice_seq_textfile \
	$tr $ind_var_list >> fidap.log
nice -$priority voxelwise_hemodynamics $headerfile $name_textfile \
	$num_runs $num_dat_pts $mask $max_lag $min_lag $num_ind_var $slice_seq_textfile \
	$tr $ind_var_list << EOF
$abs_time
$ratio_norm
EOF

set dims = `get_dims_from $headerfile`
foreach file($lag_disp_list best_lag.img best_disp.img)
    set max = `maxfp $file`
    set min = `minfp $file`
    makeheader4 $file:r.hdr $dims 1 32 255 0 $max $min 16 1
end
fp2byte_script $lag_disp_list best_lag.img best_disp.img
