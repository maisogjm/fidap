#! /bin/csh -f
# fmrifft_hann_script
# 03.21.95 by Jose' Ma. Maisog, M.D.
# Laboratory of Psychology and Psychopathology,
# National Institute of Mental Health

#
# Shell script to perform a 1D temporal FFT on a series of 16-bit ANALYZE images.

# C executables called: fmrifft_hann, get_dims_from, maxfp, minfp, fp2byte_script, makeheader4

# SAVE CURRENT WORKING DIRECTORY FOR LATER USE
set startdir = $cwd

# QUERY USER FOR IMAGE DIRECTORY
scroll 10
echo  ""
echo '******************************************************'
echo  ""
echo Many thanks to John Darrell Van Horn, Ph.D., NIH/NIMH/CBDB
echo for addressing statistical tests of significance.
echo ""
echo  This script will perform a 1D temporal FFT on a set of
echo 16-bit ANALYZE images.  The images must all be located
echo in the same directory, and there must be at least one
echo ANALYZE header .hdr file which contains the appropriate
echo image dimension information.  You must have read/write
echo access to the directory in which the images are kept.
echo ""
echo -n "Please enter directory in which 16-bit ANALYZE images are kept: "
set dir = $<
while (! -d $dir)
    echo Directory $dir does not exist.
    echo ""
    echo -n "Please enter directory in which 16-bit ANALYZE images are kept: "
    set dir = $<
end
cd $dir
touch fidap.log
echo '******************************************************' >> fidap.log
echo `date` " : " $user " : " fmrifft_hann_script >> fidap.log


# QUERY USER FOR NAME OF INPUT TEXT FILE, IF IT ALREADY EXISTS
echo  ""
echo '******************************************************'
echo  ""
echo To run this script, you must first have made an input text file.
echo ""
echo The first line in the text file should contain the name of an
echo ANALYZE header .hdr file which contains the correct XYZ dimensions
echo of the ANALYZE images on which this FFT will be performed.
echo The rest of the text file should contain the names of the image
echo files, one name per line, in the correct chronological order.
echo ""
echo -n Press Return to continue...
set dummy = $<
echo ""
set example = `which fftinput.txt`
echo For an example, see the textfile $example
echo ""
echo If your text file doesn\'t yet exist, you can create it using a text editor
echo \(eg, vi, emacs, or ez\), or you can create it via this script.
echo ""
echo CHOICES:
echo "  (1) The text file is already made."
echo "      Continue with this script."
echo "  (2) Make the text file now, using either"
echo "      vi, emacs, or ez."
echo "  (3) Create the text file by directly typing"
echo "      in the filenames via this script."
echo "  (4) Exit this script, and make the text file"
echo "      (using, eg,  vi, emacs, or ez).  After it is"
echo "      created you must return to this script."
echo ""
echo -n " CHOOSE ACTION: "
set choice = $<
while ($choice != "1" && $choice != "2" && $choice != "3" && $choice != "4")
    echo -n " CHOOSE ACTION: "
    set choice = $<
end

switch ($choice)
    # TWO TEXT FILES ALREADY MADE.
    case 1:
    echo ""
    echo -n "Type in name of text file: "
    set textfile = $<
    while (! -e $textfile)
        echo $textfile does not exist.
        echo ""
        echo -n "Type in name of text file: "
        set textfile = $<
    end
    echo ""
    goto textfile_made
    breaksw

    # MAKE THE TWO TEXT FILES VIA THIS SCRIPT
    case 2:
    echo ""
    echo -n "Type in desired name for text file: "
    set textfile = $<
    echo ""
    echo -n "Type in desired editor (eg, "vi" or "emacs"): "
    set editor = $<
    echo ""
    echo ""
    echo Now entering the editor $editor, creating file $textfile.
    echo In this file you must put the names of the images
    echo in group 1, one name per line.  After each image name
    echo you must place a number which will be used to weight the
    echo images when ratio-adjusting the global mean intensities.
    echo -n Type Return when ready...
    set dummy = $<
    echo ""
    eval `echo $editor $textfile`
    echo ""
    breaksw

    # MAKE THE TWO TEXT FILES VIA THIS SCRIPT
    case 3:
    echo ""
    echo -n "Type in desired name for text file: "
    set textfile = $<
    echo ""
    echo ""
    echo I shall now create the file $textfile.  You must now type in
    echo "the names of the images in group 1, one name per line.  After"
    echo each image name you must place a number which will be used to
    echo weight the images when ratio-adjusting the global mean
    echo "intensities.  End EACH line with a carriage return."
    echo After the last carriage return, type a \<Control-D\>.
    echo ""
    cat > $textfile
    echo ""
    echo ""
    breaksw

    # EXIT SCRIPT, MAKE THE TWO TEXT FILES, AND THEN RETURN TO THIS SCRIPT.
    case 4:
    echo You have chosen to exit this script.  You must now create the
    echo text file. The first line in the text file should contain the
    echo name of an ANALYZE header .hdr file which contains the correct
    echo XYZ dimensions of the ANALYZE images on which this FFT will be
    echo performed.  The rest of the text file should contain the names
    echo of the image files, one name per line, in the correct chronological
    echo order.
    echo Then re-run this script.
    echo -n Type Return when ready...
    set dummy = $<
    exit
    breaksw

endsw

textfile_made:
# QUERY USER FOR NAME OF ANALYZE .hdr FILE
echo  ""
echo '******************************************************'
echo  ""
echo Here are the ANALYZE header files in ${dir}:
\ls *.hdr
echo ""
echo "Please enter the name of one of these ANALYZE header"
echo "files which has the correct image dimensions for your"
echo -n "images (including .hdr extension): "
set hdrfile = $<
while (! -e $hdrfile)
    echo $hdrfile does not exist.
    echo ""
    echo -n "Type in name of header file file: "
    set hdrfile = $<
end
set dims = `get_dims_from $hdrfile`
@ num_vox = $dims[1] * $dims[2] * $dims[3]

# QUERY USER FOR NUMBER OF HARMONICS DESIRED
echo  ""
echo '******************************************************'
echo  ""
set num_images = `wc -w $textfile`
@ num_images--
echo There are $num_images in $textfile.
echo The FFT can generate up to $num_images magnitude
echo and $num_images phase images.  You may not be interested
echo in having all of these images output, although for certain
echo tests of spectral significance you may have to.
echo ""
echo -n "How many harmonics (including 0 Hz) do you want output? "
set num_harm = $<
while ($num_harm > $num_images)
    echo Number of harmonics cannot be greater than $num_images.
    echo -n "How many harmonics (including 0 Hz) do you want output? "
    set num_harm = $<
end

# QUERY USER FOR NAME OF MASK IMAGE
echo  ""
echo '******************************************************'
echo  ""
echo You must now enter the name of the 8-bit mask image file.
echo This 8-bit mask will determine brain versus non-brain.
echo A value of 1 indicates brain, a value of 0 indicates non-brain.
echo Obviously, calculations will be done only on indicated brain voxels.
echo ""
echo -n "ENTER the name of the maskfile (including .img extension): "
set maskfile = $<
while (! -e $maskfile)
    echo $maskfile does not exist.
    echo ""
    echo -n "ENTER the name of the maskfile (including .img extension): "
    set maskfile = $<
end
echo ""
echo $maskfile will be used as the maskfile.
echo ""

# QUERY USER FOR COORDINATES OF VOXEL OF INTEREST
echo  ""
echo '******************************************************'
echo  ""
echo In addition to the magnitude and phase images, the time
echo series and FFT of a voxel of interest will be put in a
echo text file with the name \"fft_X_Y_Z.txt,\" where XYZ are
echo the xyz coordinates of the voxel of interest.
echo ""
echo -n "  X-coordinate of voxel of interest: "
set x_int = $<
echo -n "  Y-coordinate of voxel of interest: "
set y_int = $<
echo -n "  Z-coordinate of voxel of interest: "
set z_int = $<
@ vox_index_int = ((($z_int - 1) * $dims[2]) + $y_int - 1) * $dims[1] + $x_int - 1
while (($vox_index_int < 0) || ($vox_index_int > $num_vox - 1))
    echo Bad coordinates, given image dimensions in $hdrfile.
    echo ""
    echo -n "  X-coordinate of voxel of interest: "
    set x_int = $<
    echo -n "  Y-coordinate of voxel of interest: "
    set y_int = $<
    echo -n "  Z-coordinate of voxel of interest: "
    set z_int = $<
    @ vox_index_int = ((($z_int - 1) * $dims[2]) + $y_int - 1) * $dims[1] + $x_int - 1
end
echo ""
echo The output text file will be written to fft_${x_int}_${y_int}_$z_int.txt

# QUERY USER WHETHER WINDOWING WITH HANNING WINDOW IS DESIRED
echo  ""
echo '******************************************************'
echo  ""
echo -n "Do you want time series to be windowed with a Hanning window <y/n>? "
set window = $<
while (($window != 'y') && ($window != 'n'))
    echo Type a \'y\' or an \'n\'.
    echo -n "Do you want time series to be windowed with a Hanning window <y/n>? " 
    set window = $<
end

# QUERY USER WHETHER NORMALIZATION OF TIME SERIES IS DESIRED
echo  ""
echo '******************************************************'
echo  ""
echo -n "Do you want time series to be normalized to unit power <y/n>? "
set normalize = $<
while (($normalize != 'y') && ($normalize != 'n'))
    echo Type a \'y\' or an \'n\'.
    echo -n "Do you want time series to be normalized to unit power <y/n>? "
    set normalize = $<
end

echo ""
echo '******************************************************'
echo ""
echo Finally, you must type in a number between 0 and 19.
echo The \'nice\' command will use this number to adjust
echo the priority of this process.  \'0\' will result in
echo the default priority being used.  Higher numbers will
echo result in lower priorities.  We recommend \'0\' to be
echo used during off hours, and higher \(nicer\) numbers to
echo be used during regular work hours.
echo ""
echo -n "Priority adjustment number? "
set priority = $<
if ($priority == "") then
    set priority = 0
endif
echo $priority >> fidap.log

# CHECK WITH USER IF IT'S OKAY TO GO ON
echo ""
echo -n "Continue <y/n>? "
set choice = $<
if ($choice != "y") then
    echo QUITTING SHELL SCRIPT....
    sleep 2
    exit
endif

# MAKE TEMP FILE
cat > /usr/tmp/fmrifft_hann_script.$$.tmp << EOF
$window
$normalize
y
EOF

# CALL fmrifft_hann:
echo ""
echo Now performing fft\; may take a while to process...
echo nice -$priority fmrifft_hann $textfile $num_harm $maskfile $x_int $y_int $z_int >> fidap.log
echo nice -$priority fmrifft_hann $textfile $num_harm $maskfile $x_int $y_int $z_int
nice -$priority fmrifft_hann $textfile $num_harm $maskfile $x_int $y_int $z_int < /usr/tmp/fmrifft_hann_script.$$.tmp > fft_${x_int}_${y_int}_$z_int.txt
\rm /usr/tmp/fmrifft_hann_script.$$.tmp
sleep 10

# MAKE HEADERS FOR HARMONIC OUTPUT, CONVERT TO BYTE IMAGES
foreach file(mag*img phs*img)
    set imgmax = `maxfp $file`
    set imgmin = `minfp $file`
makeheader4 $file:r.hdr $dims 1 32 $imgmax $imgmin $imgmax $imgmin 16
end
fp2byte_script mag*img phs*img

exit

